const { autoUpdater } = require('electron-updater');
const { dialog, shell } = require('electron');
const { ipcMain } = require('electron');

class UpdateManager {
  constructor(mainWindow) {
    this.mainWindow = mainWindow;
    this.updateInfo = null;
    this.isCheckingForUpdate = false;
    this.isUpdateAvailable = false;
    this.isUpdateDownloaded = false;
    
    this.initializeUpdater();
    this.setupEventListeners();
    this.setupIpcHandlers();
  }

  initializeUpdater() {
    // Configuration de l'auto-updater
    autoUpdater.checkForUpdatesAndNotify = false; // On g√®re manuellement
    autoUpdater.autoDownload = false; // On demande confirmation avant le t√©l√©chargement
    autoUpdater.allowPrerelease = false; // Seulement les versions stables
    
    // Configuration des logs (utile pour le debug)
    autoUpdater.logger = require('electron-log');
    autoUpdater.logger.transports.file.level = 'info';
    
    console.log('üîÑ UpdateManager initialis√©');
  }

  setupEventListeners() {
    // √âv√©nement : V√©rification des mises √† jour
    autoUpdater.on('checking-for-update', () => {
      console.log('üîç V√©rification des mises √† jour...');
      this.isCheckingForUpdate = true;
      this.sendToRenderer('update-checking');
    });

    // √âv√©nement : Mise √† jour disponible
    autoUpdater.on('update-available', (info) => {
      console.log('üÜï Mise √† jour disponible:', info.version);
      this.updateInfo = info;
      this.isCheckingForUpdate = false;
      this.isUpdateAvailable = true;
      this.sendToRenderer('update-available', info);
      this.showUpdateAvailableDialog(info);
    });

    // √âv√©nement : Pas de mise √† jour
    autoUpdater.on('update-not-available', (info) => {
      console.log('‚úÖ Application √† jour (version:', info.version, ')');
      this.isCheckingForUpdate = false;
      this.isUpdateAvailable = false;
      this.sendToRenderer('update-not-available', info);
    });

    // √âv√©nement : Erreur lors de la v√©rification
    autoUpdater.on('error', (error) => {
      console.error('‚ùå Erreur lors de la mise √† jour:', error);
      this.isCheckingForUpdate = false;
      this.sendToRenderer('update-error', error);
      this.showUpdateErrorDialog(error);
    });

    // √âv√©nement : Progression du t√©l√©chargement
    autoUpdater.on('download-progress', (progressObj) => {
      let logMessage = `üì• T√©l√©chargement: ${Math.round(progressObj.percent)}%`;
      logMessage += ` (${Math.round(progressObj.bytesPerSecond / 1024)} Ko/s)`;
      console.log(logMessage);
      this.sendToRenderer('update-download-progress', progressObj);
    });

    // √âv√©nement : T√©l√©chargement termin√©
    autoUpdater.on('update-downloaded', (info) => {
      console.log('‚úÖ Mise √† jour t√©l√©charg√©e:', info.version);
      this.isUpdateDownloaded = true;
      this.sendToRenderer('update-downloaded', info);
      this.showUpdateReadyDialog(info);
    });
  }

  setupIpcHandlers() {
    // Handler : V√©rifier les mises √† jour manuellement
    ipcMain.handle('check-for-updates', async () => {
      return this.checkForUpdates();
    });

    // Handler : T√©l√©charger la mise √† jour
    ipcMain.handle('download-update', async () => {
      return this.downloadUpdate();
    });

    // Handler : Installer et red√©marrer
    ipcMain.handle('install-update', async () => {
      return this.installUpdate();
    });

    // Handler : Obtenir le statut des mises √† jour
    ipcMain.handle('get-update-status', async () => {
      return {
        isCheckingForUpdate: this.isCheckingForUpdate,
        isUpdateAvailable: this.isUpdateAvailable,
        isUpdateDownloaded: this.isUpdateDownloaded,
        updateInfo: this.updateInfo
      };
    });

    // Handler : Annuler la mise √† jour
    ipcMain.handle('cancel-update', async () => {
      this.isUpdateAvailable = false;
      this.isUpdateDownloaded = false;
      this.updateInfo = null;
      this.sendToRenderer('update-cancelled');
      return true;
    });
  }

  async checkForUpdates() {
    try {
      if (this.isCheckingForUpdate) {
        console.log('‚è≥ V√©rification d√©j√† en cours...');
        return false;
      }

      console.log('üîç V√©rification manuelle des mises √† jour...');
      const result = await autoUpdater.checkForUpdates();
      return result !== null;
    } catch (error) {
      console.error('‚ùå Erreur lors de la v√©rification:', error);
      return false;
    }
  }

  async downloadUpdate() {
    try {
      if (!this.isUpdateAvailable) {
        console.log('‚ö†Ô∏è Aucune mise √† jour disponible √† t√©l√©charger');
        return false;
      }

      console.log('üì• D√©marrage du t√©l√©chargement...');
      await autoUpdater.downloadUpdate();
      return true;
    } catch (error) {
      console.error('‚ùå Erreur lors du t√©l√©chargement:', error);
      return false;
    }
  }

  async installUpdate() {
    try {
      if (!this.isUpdateDownloaded) {
        console.log('‚ö†Ô∏è Aucune mise √† jour t√©l√©charg√©e √† installer');
        return false;
      }

      console.log('üîÑ Installation et red√©marrage...');
      autoUpdater.quitAndInstall();
      return true;
    } catch (error) {
      console.error('‚ùå Erreur lors de l\'installation:', error);
      return false;
    }
  }

  showUpdateAvailableDialog(info) {
    const options = {
      type: 'info',
      title: 'Mise √† jour disponible',
      message: `Une nouvelle version (${info.version}) est disponible !`,
      detail: `Version actuelle : ${require('../../package.json').version}\nNouvelle version : ${info.version}\n\n${info.releaseNotes || 'Am√©liorations et corrections de bugs.'}`,
      buttons: ['T√©l√©charger maintenant', 'Plus tard', 'Voir les d√©tails'],
      defaultId: 0,
      cancelId: 1
    };

    dialog.showMessageBox(this.mainWindow, options).then((result) => {
      switch (result.response) {
        case 0: // T√©l√©charger maintenant
          this.downloadUpdate();
          break;
        case 1: // Plus tard
          console.log('üìÖ Mise √† jour report√©e');
          break;
        case 2: // Voir les d√©tails
          if (info.releaseNotesUrl) {
            shell.openExternal(info.releaseNotesUrl);
          }
          break;
      }
    });
  }

  showUpdateReadyDialog(info) {
    const options = {
      type: 'info',
      title: 'Mise √† jour pr√™te',
      message: `La mise √† jour vers la version ${info.version} est pr√™te !`,
      detail: 'L\'application va red√©marrer pour appliquer la mise √† jour.',
      buttons: ['Red√©marrer maintenant', 'Plus tard'],
      defaultId: 0,
      cancelId: 1
    };

    dialog.showMessageBox(this.mainWindow, options).then((result) => {
      if (result.response === 0) {
        this.installUpdate();
      } else {
        console.log('üìÖ Installation report√©e');
      }
    });
  }

  showUpdateErrorDialog(error) {
    const options = {
      type: 'error',
      title: 'Erreur de mise √† jour',
      message: 'Une erreur est survenue lors de la v√©rification des mises √† jour',
      detail: error.message,
      buttons: ['OK']
    };

    dialog.showMessageBox(this.mainWindow, options);
  }

  sendToRenderer(channel, data = null) {
    if (this.mainWindow && this.mainWindow.webContents) {
      this.mainWindow.webContents.send(channel, data);
    }
  }

  // V√©rification automatique au d√©marrage (appel√©e apr√®s 30 secondes)
  scheduleInitialCheck() {
    setTimeout(() => {
      console.log('‚è∞ V√©rification automatique des mises √† jour au d√©marrage');
      this.checkForUpdates();
    }, 30000); // 30 secondes apr√®s le d√©marrage
  }

  // V√©rification p√©riodique (toutes les 6 heures)
  schedulePeriodicCheck() {
    setInterval(() => {
      console.log('‚è∞ V√©rification p√©riodique des mises √† jour');
      this.checkForUpdates();
    }, 6 * 60 * 60 * 1000); // 6 heures
  }
}

module.exports = UpdateManager; 